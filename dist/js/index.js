(()=>{"use strict";class t{constructor(t,e,i,s,n){this.foodSize=t,this.foodColor=e,this.foodBorderColor=i,this.XLimit=s,this.YLimit=n}get xCoordinate(){return this.x}get yCoordinate(){return this.y}drawOnCanvas(t){t.fillStyle=this.foodColor,t.strokeStyle=this.foodBorderColor,t.fillRect(this.x,this.y,this.foodSize,this.foodSize),t.strokeRect(this.x,this.y,this.foodSize,this.foodSize)}generateCoordinates(t){for(this.x=this.getRandomCoordinate(0,this.XLimit-this.foodSize),this.y=this.getRandomCoordinate(0,this.YLimit-this.foodSize);this.foodCollidesWithSnake(t);)this.generateCoordinates(t)}foodCollidesWithSnake(t){return t.some((t=>t.x===this.x&&t.y===this.y))}getRandomCoordinate(t,e){return Math.round((Math.random()*(e-t)+t)/this.foodSize)*this.foodSize}}class e{constructor(t){this.snakeGame=t,this.gameHasStarted=!1,document.addEventListener("keydown",this)}handleEvent(t){const e=t.code;"Space"===e?this.handleSpacebar():"KeyR"===e?this.handleRKey():this.snakeGame.snake.changeDirection(e)}handleSpacebar(){document.getElementById("dark_mode_input")!==document.activeElement&&(!1===this.gameHasStarted?(this.snakeGame.start(),this.gameHasStarted=!0):this.snakeGame.isGameRunning()?this.snakeGame.pause():this.snakeGame.resume())}handleRKey(){this.snakeGame.restart(),this.gameHasStarted=!1}}class i{constructor(t){this.snakeGame=t,this.mobileArrowsDiv=document.getElementById("mobile-arrows"),this.gameControlButtons=document.querySelectorAll(".game-controls-container button"),this.mobileArrowsDiv.addEventListener("click",(t=>this.handleArrowsEvent(t))),this.gameControlButtons.forEach((t=>{t.addEventListener("click",(t=>{const e=t.target.dataset.toggle;this.handleGameControlButtons(e)}))}))}handleArrowsEvent(t){const e=t.target.closest("button");null!==e&&e.dataset.code&&this.snakeGame.snake.changeDirection(e.dataset.code)}handleGameControlButtons(t){let e;"start"===t?e="Space":"restart"===t&&(e="KeyR"),document.dispatchEvent(new KeyboardEvent("keydown",{code:e}))}}class s{constructor(t){this.snakeGame=t,this.foodEatenAudio=new Audio("/dist/sounds/eat-food.wav"),this.scoreSpan=document.getElementById("score"),this.scoreAnimationSpan=document.querySelector(".score-animation"),document.addEventListener("food-eaten",(()=>this.increaseScore())),document.addEventListener("reset-score",(()=>this.resetScore()))}increaseScore(){let t=this.scoreSpan.innerHTML,e=parseInt(t)+1;this.scoreSpan.innerHTML=e.toString(),this.playScoreAnimation(),this.foodEatenAudio.play()}resetScore(){this.scoreSpan.innerHTML="0"}playScoreAnimation(){this.scoreAnimationSpan.classList.add("animated"),this.scoreAnimationSpan.addEventListener("animationend",(()=>{this.scoreAnimationSpan.classList.remove("animated")}))}}class n{constructor(t){this.snakeGame=t,this.optionsModal=document.querySelector(".options"),this.optionsModalOpenButton=document.querySelector(".btn--open-modal"),this.optionsModalCloseButton=document.querySelector(".btn--close-modal"),this.darkModeInput=document.getElementById("dark_mode_input"),this.difficultyController=document.getElementById("game-difficulty"),this.optionsModalOpenButton.addEventListener("click",(t=>this.openOptionsModal())),this.optionsModalCloseButton.addEventListener("click",(t=>this.closeOptionsModal())),this.darkModeInput.addEventListener("change",(t=>this.changeTheme())),this.difficultyController.addEventListener("change",(t=>this.changeDifficulty(t)))}openOptionsModal(){this.optionsModal.classList.add("open"),this.snakeGame.pause()}closeOptionsModal(){this.optionsModal.classList.remove("open")}changeTheme(){this.snakeGame.switchColorTheme()}changeDifficulty(t){const e=this.getNewDifficulty();this.snakeGame.changeDifficulty(e),this.difficultyController.blur()}getNewDifficulty(){const t=this.difficultyController.selectedIndex,e=this.difficultyController.options[t].value;return parseInt(e)}}let a,o;a=o=matchMedia("(max-width: 576px)").matches?window.innerWidth-50:500;const h=new class{constructor(t="snakeBoard",e=300,i=300,s="#be8984"){this.width=e,this.height=i,this.backgroundColor=s,this.colorTheme="white",this.canvas=document.getElementById(t),this.ctx=this.canvas.getContext("2d"),this.adjustDimensions(this.width,this.height)}adjustDimensions(t,e){this.canvas.setAttribute("width",t.toString()),this.canvas.setAttribute("height",e.toString()),this.canvas.style.width=t+"px",this.canvas.style.height=e+"px"}clear(){this.ctx.fillStyle=this.backgroundColor,this.ctx.fillRect(0,0,this.width,this.height)}drawElement(t){t.drawOnCanvas(this.ctx)}setWhiteMode(){this.backgroundColor="#be8984",this.colorTheme="white"}setDarkMode(){this.backgroundColor="black",this.colorTheme="dark"}switchColorTheme(){"white"==this.colorTheme?this.setDarkMode():this.setWhiteMode()}}("snakeBoard",a,o),r=new class{constructor(t,e,i){this.tileSize=t,this.tileColor=e,this.headColor=i,this.initialXPos=100,this.initialYPos=100,this.numOfStartingBlocks=4,this.verticalSpeed=0,this.horizontalSpeed=-1*this.tileSize,this._tiles=[],this.resetCoordinates()}get tiles(){return this._tiles}get snakeHead(){return this.tiles[0]}hasSnakeEatenFood(t,e){return t.x===e.xCoordinate&&t.y===e.yCoordinate}dispatchFoodEatenEvent(){document.dispatchEvent(new Event("food-eaten"))}drawSnakeTile(t,e,i){i.fillStyle=0===e?this.headColor:this.tileColor,i.strokeStyle="darkblue";const{x:s,y:n}=t;i.fillRect(s,n,this.tileSize,this.tileSize),i.strokeRect(s,n,this.tileSize,this.tileSize)}drawOnCanvas(t){this.tiles.forEach(((e,i)=>{this.drawSnakeTile(e,i,t)}))}move(t){const e={x:this.tiles[0].x+this.horizontalSpeed,y:this.tiles[0].y+this.verticalSpeed};this.tiles.unshift(e),this.hasSnakeEatenFood(e,t)?(t.generateCoordinates(this.tiles),this.dispatchFoodEatenEvent()):this.tiles.pop()}resetDirection(){this.horizontalSpeed=-1*this.tileSize,this.verticalSpeed=0}resetCoordinates(){this.resetDirection(),this._tiles=[];let t=this.initialXPos,e=this.initialYPos;for(let i=0;i<this.numOfStartingBlocks;i++)this.tiles.push({x:t,y:e}),t+=this.tileSize}changeDirection(t){const e=this.verticalSpeed===-1*this.tileSize,i=this.verticalSpeed===this.tileSize,s=this.horizontalSpeed===this.tileSize,n=this.horizontalSpeed===-1*this.tileSize;"ArrowLeft"!==t||s?"ArrowRight"!==t||n?"ArrowUp"!==t||i?"ArrowDown"!==t||e||(this.horizontalSpeed=0,this.verticalSpeed=this.tileSize):(this.horizontalSpeed=0,this.verticalSpeed=-1*this.tileSize):(this.horizontalSpeed=this.tileSize,this.verticalSpeed=0):(this.horizontalSpeed=-1*this.tileSize,this.verticalSpeed=0)}}(20,"darkgreen","yellow");var d;d=new class{constructor(e,i){this.snake=e,this.canvas=i,this.gameSpeed=300,this.food=new t(this.snake.tileSize,"lightgreen","yellow",this.canvas.width,this.canvas.height),this.initialRender()}hasSnakeGameEnded(){const t=this.snake.snakeHead;return function(e){for(let i=4;i<e.snake.tiles.length;i++)if(e.snake.tiles[i].x===t.x&&e.snake.tiles[i].y===t.y)return!0;return!1}(this)||function(e){const i=t.x<0,s=t.x>e.canvas.width-e.snake.tileSize,n=t.y<0,a=t.y>e.canvas.height-e.snake.tileSize;return i||s||n||a}(this)}dispatchResetScoreEvent(){document.dispatchEvent(new Event("reset-score"))}initialRender(){this.canvas.clear(),this.canvas.drawElement(this.snake)}renderGame(){if(this.hasSnakeGameEnded())return clearInterval(this.gameInterval),this.running=!1,void this.changeGameState('You died :( Press "R" to restart the game.');this.canvas.clear(),this.snake.move(this.food),this.canvas.drawElement(this.snake),this.canvas.drawElement(this.food)}start(){this.running||(this.gameInterval=setInterval(this.renderGame.bind(this),this.gameSpeed),this.food.generateCoordinates(this.snake.tiles),this.running=!0,this.changeGameState(""))}pause(){clearInterval(this.gameInterval),this.running=!1,this.changeGameState("Paused...")}resume(){this.running||(this.gameInterval=setInterval(this.renderGame.bind(this),this.gameSpeed),this.running=!0,this.changeGameState(""))}restart(){this.snake.resetCoordinates(),this.dispatchResetScoreEvent(),this.changeGameState(""),this.food.generateCoordinates(this.snake.tiles),this.initialRender()}isGameRunning(){return this.running}switchColorTheme(){document.documentElement.classList.toggle("dark"),this.canvas.switchColorTheme(),this.canvas.clear(),this.canvas.drawElement(this.snake),this.canvas.drawElement(this.food)}changeDifficulty(t){this.gameSpeed=t,this.isGameRunning()&&(clearInterval(this.gameInterval),this.gameInterval=setInterval(this.renderGame.bind(this),this.gameSpeed))}changeGameState(t){document.querySelector(".game-state").innerHTML=t}}(r,h),new e(d),new i(d),new s(d),new n(d)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90X3NuYWtlLy4vc3JjL3RzL2NsYXNzZXMvRm9vZC50cyIsIndlYnBhY2s6Ly90X3NuYWtlLy4vc3JjL3RzL2V2ZW50SGFuZGxlcnMvS2V5Ym9hcmRIYW5kbGVyLnRzIiwid2VicGFjazovL3Rfc25ha2UvLi9zcmMvdHMvZXZlbnRIYW5kbGVycy9Ub3VjaEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vdF9zbmFrZS8uL3NyYy90cy9ldmVudEhhbmRsZXJzL1Njb3JlSGFuZGxlci50cyIsIndlYnBhY2s6Ly90X3NuYWtlLy4vc3JjL3RzL2V2ZW50SGFuZGxlcnMvT3B0aW9uc0hhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vdF9zbmFrZS8uL3NyYy90cy9pbmRleC50cyIsIndlYnBhY2s6Ly90X3NuYWtlLy4vc3JjL3RzL2NsYXNzZXMvQ2FudmFzLnRzIiwid2VicGFjazovL3Rfc25ha2UvLi9zcmMvdHMvY2xhc3Nlcy9TbmFrZS50cyIsIndlYnBhY2s6Ly90X3NuYWtlLy4vc3JjL3RzL2V2ZW50SGFuZGxlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vdF9zbmFrZS8uL3NyYy90cy9jbGFzc2VzL0dhbWUudHMiXSwibmFtZXMiOlsiRm9vZCIsImZvb2RTaXplIiwiZm9vZENvbG9yIiwiZm9vZEJvcmRlckNvbG9yIiwiWExpbWl0IiwiWUxpbWl0IiwidGhpcyIsIngiLCJ5IiwiY29udGV4dCIsImZpbGxTdHlsZSIsInN0cm9rZVN0eWxlIiwiZmlsbFJlY3QiLCJzdHJva2VSZWN0IiwidGlsZXMiLCJnZXRSYW5kb21Db29yZGluYXRlIiwiZm9vZENvbGxpZGVzV2l0aFNuYWtlIiwiZ2VuZXJhdGVDb29yZGluYXRlcyIsInNvbWUiLCJ0aWxlIiwibWluIiwibWF4IiwiTWF0aCIsInJvdW5kIiwicmFuZG9tIiwiS2V5Ym9hcmRIYW5kbGVyIiwic25ha2VHYW1lIiwiZ2FtZUhhc1N0YXJ0ZWQiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXNzZWRLZXlDb2RlIiwiY29kZSIsImhhbmRsZVNwYWNlYmFyIiwiaGFuZGxlUktleSIsInNuYWtlIiwiY2hhbmdlRGlyZWN0aW9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJhY3RpdmVFbGVtZW50Iiwic3RhcnQiLCJpc0dhbWVSdW5uaW5nIiwicGF1c2UiLCJyZXN1bWUiLCJyZXN0YXJ0IiwiVG91Y2hIYW5kbGVyIiwibW9iaWxlQXJyb3dzRGl2IiwiZ2FtZUNvbnRyb2xCdXR0b25zIiwicXVlcnlTZWxlY3RvckFsbCIsImhhbmRsZUFycm93c0V2ZW50IiwiZm9yRWFjaCIsImJ1dHRvbiIsImV2ZW50Q29kZSIsInRhcmdldCIsImRhdGFzZXQiLCJ0b2dnbGUiLCJoYW5kbGVHYW1lQ29udHJvbEJ1dHRvbnMiLCJldmVudFRhcmdldCIsImNsb3Nlc3QiLCJidXR0b25Db2RlIiwiZGlzcGF0Y2hFdmVudCIsIktleWJvYXJkRXZlbnQiLCJTY29yZUhhbmRsZXIiLCJmb29kRWF0ZW5BdWRpbyIsIkF1ZGlvIiwic2NvcmVTcGFuIiwic2NvcmVBbmltYXRpb25TcGFuIiwicXVlcnlTZWxlY3RvciIsImluY3JlYXNlU2NvcmUiLCJyZXNldFNjb3JlIiwiY3VycmVudFNjb3JlIiwiaW5uZXJIVE1MIiwibmV3U2NvcmUiLCJwYXJzZUludCIsInRvU3RyaW5nIiwicGxheVNjb3JlQW5pbWF0aW9uIiwicGxheSIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsIkRpZmZpY3VsdHlIYW5sZGVyIiwib3B0aW9uc01vZGFsIiwib3B0aW9uc01vZGFsT3BlbkJ1dHRvbiIsIm9wdGlvbnNNb2RhbENsb3NlQnV0dG9uIiwiZGFya01vZGVJbnB1dCIsImRpZmZpY3VsdHlDb250cm9sbGVyIiwib3Blbk9wdGlvbnNNb2RhbCIsImNsb3NlT3B0aW9uc01vZGFsIiwiY2hhbmdlVGhlbWUiLCJjaGFuZ2VEaWZmaWN1bHR5Iiwic3dpdGNoQ29sb3JUaGVtZSIsIm5ld0RpZmZpY3VsdHkiLCJnZXROZXdEaWZmaWN1bHR5IiwiYmx1ciIsInNlbGVjdGVkRGlmZmljdWx0eUluZGV4Iiwic2VsZWN0ZWRJbmRleCIsImRpZmZpY3VsdHkiLCJvcHRpb25zIiwidmFsdWUiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImNhbnZhcyIsImlkIiwid2lkdGgiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvclRoZW1lIiwiY3R4IiwiZ2V0Q29udGV4dCIsImFkanVzdERpbWVuc2lvbnMiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZSIsImVsZW1lbnQiLCJkcmF3T25DYW52YXMiLCJzZXREYXJrTW9kZSIsInNldFdoaXRlTW9kZSIsInRpbGVTaXplIiwidGlsZUNvbG9yIiwiaGVhZENvbG9yIiwiaW5pdGlhbFhQb3MiLCJpbml0aWFsWVBvcyIsIm51bU9mU3RhcnRpbmdCbG9ja3MiLCJ2ZXJ0aWNhbFNwZWVkIiwiaG9yaXpvbnRhbFNwZWVkIiwiX3RpbGVzIiwicmVzZXRDb29yZGluYXRlcyIsIm5ld0hlYWQiLCJmb29kIiwieENvb3JkaW5hdGUiLCJ5Q29vcmRpbmF0ZSIsIkV2ZW50IiwidGlsZUluZGV4IiwicGFyZW50Q2FudmFzQ29udGV4dCIsImRyYXdTbmFrZVRpbGUiLCJ1bnNoaWZ0IiwiaGFzU25ha2VFYXRlbkZvb2QiLCJkaXNwYXRjaEZvb2RFYXRlbkV2ZW50IiwicG9wIiwicmVzZXREaXJlY3Rpb24iLCJmaXJzdFhQb3MiLCJmaXJzdFlQb3MiLCJpIiwicHVzaCIsImdvaW5nVXAiLCJnb2luZ0Rvd24iLCJnb2luZ1JpZ2h0IiwiZ29pbmdMZWZ0IiwiZ2FtZVNwZWVkIiwiaW5pdGlhbFJlbmRlciIsImhlYWQiLCJzbmFrZUhlYWQiLCJsZW5ndGgiLCJzbmFrZUF0ZUl0c2VsZiIsImhpdExlZnRXYWxsIiwiaGl0UmlnaHRXYWxsIiwiaGl0VG9wdFdhbGwiLCJoaXRCb3R0b21XYWxsIiwic25ha2VIaXRCb3VuZGFyaWVzIiwiY2xlYXIiLCJkcmF3RWxlbWVudCIsImhhc1NuYWtlR2FtZUVuZGVkIiwiY2xlYXJJbnRlcnZhbCIsImdhbWVJbnRlcnZhbCIsInJ1bm5pbmciLCJjaGFuZ2VHYW1lU3RhdGUiLCJtb3ZlIiwic2V0SW50ZXJ2YWwiLCJyZW5kZXJHYW1lIiwiYmluZCIsImRpc3BhdGNoUmVzZXRTY29yZUV2ZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3RhdGUiXSwibWFwcGluZ3MiOiJtQkFFZSxNQUFNQSxFQW1CcEIsWUFDVUMsRUFDQUMsRUFDQUMsRUFFQUMsRUFDQUMsR0FMQSxLQUFBSixXQUNBLEtBQUFDLFlBQ0EsS0FBQUMsa0JBRUEsS0FBQUMsU0FDQSxLQUFBQyxTQVVWLGtCQUNDLE9BQU9DLEtBQUtDLEVBTWIsa0JBQ0MsT0FBT0QsS0FBS0UsRUFPTixhQUFhQyxHQUNuQkEsRUFBUUMsVUFBWUosS0FBS0osVUFDekJPLEVBQVFFLFlBQWNMLEtBQUtILGdCQUUzQk0sRUFBUUcsU0FBU04sS0FBS0MsRUFBR0QsS0FBS0UsRUFBR0YsS0FBS0wsU0FBVUssS0FBS0wsVUFDckRRLEVBQVFJLFdBQVdQLEtBQUtDLEVBQUdELEtBQUtFLEVBQUdGLEtBQUtMLFNBQVVLLEtBQUtMLFVBT2pELG9CQUFvQmEsR0FLMUIsSUFKQVIsS0FBS0MsRUFBSUQsS0FBS1Msb0JBQW9CLEVBQUdULEtBQUtGLE9BQVNFLEtBQUtMLFVBQ3hESyxLQUFLRSxFQUFJRixLQUFLUyxvQkFBb0IsRUFBR1QsS0FBS0QsT0FBU0MsS0FBS0wsVUFHakRLLEtBQUtVLHNCQUFzQkYsSUFDakNSLEtBQUtXLG9CQUFvQkgsR0FRbkIsc0JBQXNCQSxHQUM3QixPQUFPQSxFQUFNSSxNQUFLQyxHQUFRQSxFQUFLWixJQUFNRCxLQUFLQyxHQUFLWSxFQUFLWCxJQUFNRixLQUFLRSxJQVN4RCxvQkFBb0JZLEVBQWFDLEdBQ3hDLE9BQU9DLEtBQUtDLE9BQU9ELEtBQUtFLFVBQVlILEVBQU1ELEdBQU9BLEdBQU9kLEtBQUtMLFVBQVlLLEtBQUtMLFVDdkZqRSxNQUFNd0IsRUFX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QUFPLFFBQzFDaEQsS0FBS2tHLE9BQU9mLG1CQUdabkYsS0FBS2tHLE9BQU95RCxRQUNaM0osS0FBS2tHLE9BQU8wRCxZQUFZNUosS0FBSzZCLE9BQzdCN0IsS0FBS2tHLE9BQU8wRCxZQUFZNUosS0FBSzRILE1BT3ZCLGlCQUFpQm5DLEdBQ3ZCekYsS0FBS2dKLFVBQVl2RCxFQU9iekYsS0FBS2tDLGtCQUNSNEgsY0FBYzlKLEtBQUsrSixjQUNuQi9KLEtBQUsrSixhQUFlSSxZQUFZbkssS0FBS29LLFdBQVdDLEtBQUtySyxNQUFPQSxLQUFLZ0osWUFRM0QsZ0JBQWdCd0IsR0FDRmxKLFNBQVNzQyxjQUFjLGVBQy9CSSxVQUFZd0csSUp0TEszSSxFQUFPcUUsR0dSZCxJQUFJL0UsRUFBZ0JDLEdBQ3ZCLElBQUlrQixFQUFhbEIsR0FHakIsSUFBSW1DLEVBQWFuQyxHQUdmLElBQUksRUFBZUEsSSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERyYXdhYmxlLCBUaWxlIH0gZnJvbSBcIi4uL21vZGVscy9pbmRleFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9vZCBpbXBsZW1lbnRzIERyYXdhYmxle1xyXG5cdC8qKlxyXG5cdCAqIFRoZSBmb29kJ3MgWCBjb29yZGluYXRlLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgeCE6IG51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGZvb2QncyBZIGNvb3JkaW5hdGUuXHJcblx0ICovXHJcblx0cHJpdmF0ZSB5ITogbnVtYmVyO1xyXG5cclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyBhIG5ldyBwaWVjZSBvZiBmb29kIGZvciB0aGUgc25ha2UuXHJcblx0ICogQHBhcmFtIGZvb2RTaXplIFNpemUgb2YgdGhlIGZvb2QgdGlsZS5cclxuXHQgKiBAcGFyYW0gZm9vZENvbG9yIEZpbGwgY29sb3IgZm9yIHRoZSBwaWVjZSBvZiBmb29kLlxyXG5cdCAqIEBwYXJhbSBmb29kQm9yZGVyQ29sb3IgRmlsbCBjb2xvciBmb3IgdGhlIGJvcmRlciBvZiB0aGUgcGllY2Ugb2YgZm9vZC5cclxuXHQgKiBAcGFyYW0gWExpbWl0IEhvcml6b250YWwgYm91bmRhcnkgdGhhdCB0aGUgZm9vZCdzIGNvb3JkaW5hdGVzIGNhbm5vdCBleGNlZWQuXHJcblx0ICogQHBhcmFtIFlMaW1pdCBWZXJ0aWNhbCBib3VuZGFyeSB0aGF0IHRoZSBmb29kJ3MgY29vcmRpbmF0ZXMgY2Fubm90IGV4Y2VlZC5cclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdCBwcml2YXRlIGZvb2RTaXplOiBudW1iZXIsXHJcblx0XHQgcHJpdmF0ZSBmb29kQ29sb3I6IHN0cmluZyxcclxuXHRcdCBwcml2YXRlIGZvb2RCb3JkZXJDb2xvcjogc3RyaW5nLFxyXG5cclxuXHRcdCBwcml2YXRlIFhMaW1pdDogbnVtYmVyLFxyXG5cdFx0IHByaXZhdGUgWUxpbWl0OiBudW1iZXIsXHJcblx0KSB7IFxyXG5cclxuXHR9XHJcblxyXG5cdC8qIC0tIEdldHRlcnMgdGhhdCBhcmUgdXNlZCBpbiB0aGUgU25ha2UudHMgY2xhc3MgLS0gKi9cclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0aGUgZm9vZCdzIFggY29vcmRpbmF0ZS5cclxuXHQgKi9cclxuXHRnZXQgeENvb3JkaW5hdGUoKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiB0aGlzLng7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIHRoZSBmb29kJ3MgWSBjb29yZGluYXRlLlxyXG5cdCAqL1xyXG5cdGdldCB5Q29vcmRpbmF0ZSgpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIHRoaXMueTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRHJhd3MgdGhlIHBpZWNlIG9mIGZvb2Qgb24gdGhlIHBhcmVudCBjYW52YXMuXHJcblx0ICogQHBhcmFtIGNvbnRleHQgQ2FudmFzIHVwb24gd2hpY2ggdG8gZHJhdyB0aGUgcGllY2Ugb2YgZm9vZC5cclxuXHQgKi9cclxuXHRwdWJsaWMgZHJhd09uQ2FudmFzKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xyXG5cdFx0Y29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmZvb2RDb2xvcjtcclxuXHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmZvb2RCb3JkZXJDb2xvcjtcclxuXHJcblx0XHRjb250ZXh0LmZpbGxSZWN0KHRoaXMueCwgdGhpcy55LCB0aGlzLmZvb2RTaXplLCB0aGlzLmZvb2RTaXplKTtcclxuXHRcdGNvbnRleHQuc3Ryb2tlUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy5mb29kU2l6ZSwgdGhpcy5mb29kU2l6ZSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZW5lcmF0ZXMgY29vcmRpbmF0ZXMgZm9yIHRoZSBwaWVjZSBvZiBmb29kLlxyXG5cdCAqIEBwYXJhbSB0aWxlcyBBcnJheSBvZiB0aWxlcyB0aGF0IHRoZSBzbmFrZSBvY2N1cGllcy5cclxuXHQgKi9cclxuXHRwdWJsaWMgZ2VuZXJhdGVDb29yZGluYXRlcyh0aWxlczogVGlsZVtdKTogdm9pZCB7XHJcblx0XHR0aGlzLnggPSB0aGlzLmdldFJhbmRvbUNvb3JkaW5hdGUoMCwgdGhpcy5YTGltaXQgLSB0aGlzLmZvb2RTaXplKTtcclxuXHRcdHRoaXMueSA9IHRoaXMuZ2V0UmFuZG9tQ29vcmRpbmF0ZSgwLCB0aGlzLllMaW1pdCAtIHRoaXMuZm9vZFNpemUpO1xyXG5cclxuXHRcdC8vIEFzIGxvbmcgYXMgdGhlIGdlbmVyYXRlZCBjb29yZGluYXRlcyBvdmVybGFwIHdpdGggdGhlIHNuYWtlJ3MgdGlsZXMsIGNhbGwgdGhpcyBmdW5jdGlvbiBhZ2FpbiB0byBnZW5lcmF0ZSBhbm90aGVyIHBhaXIgb2YgY29vcmRpbmF0ZXMuXHJcblx0XHR3aGlsZSAodGhpcy5mb29kQ29sbGlkZXNXaXRoU25ha2UodGlsZXMpKVxyXG5cdFx0XHR0aGlzLmdlbmVyYXRlQ29vcmRpbmF0ZXModGlsZXMpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBDaGVja3Mgd2hldGhlciB0aGUgcmFuZG9tbHkgZ2VuZXJhdGVkIHBpZWNlIG9mIGZvb2QgY29sbGlkZXMgd2l0aCBhbnkgb2YgdGhlIHNuYWtlJ3MgdGlsZXMuXHJcblx0ICogQHBhcmFtIHRpbGVzIFNuYWtlJ3MgYXJyYXkgb2YgdGlsZXMuXHJcblx0ICogQHJldHVybnMgXHJcblx0ICovXHJcblx0cHJpdmF0ZSBmb29kQ29sbGlkZXNXaXRoU25ha2UodGlsZXM6IFRpbGVbXSk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIHRpbGVzLnNvbWUodGlsZSA9PiB0aWxlLnggPT09IHRoaXMueCAmJiB0aWxlLnkgPT09IHRoaXMueSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZW5lcmF0ZXMgYSByYW5kb20gY29vcmRpbmF0ZSBmb3IgdGhlIHBpZWNlIG9mIGZvb2QuXHJcblx0ICogQHBhcmFtIG1pbiBVc3VhbGx5IDAsIHdoaWNoIGlzIHRoZSBzdGFydGluZyBwb2ludCBvZiB0aGUgY2FudmFzLlxyXG5cdCAqIEBwYXJhbSBtYXggVGhlIGZ1cnRoZXN0IHBvaW50IG9uIHRoZSBjYW52YXMgdXBvbiB3aGljaCB0aGUgcGllY2Ugb2YgZm9vZCBjYW4gYmUgZ2VuZXJhdGVkLlxyXG5cdCAqIEByZXR1cm5zIEEgcmFuZG9tIG51bWJlciByZXByZXNlbnRpbmcgYSBjb29yZGluYXRlLiBOb3RlIHRoYXQgdGhpcyBpc24ndCBhbiAoeCwgeSkgcGFpci4gaXQncyBqdXN0IGEgc2luZ2xlIG51bWJlci5cclxuXHQgKi9cclxuXHRwcml2YXRlIGdldFJhbmRvbUNvb3JkaW5hdGUobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBNYXRoLnJvdW5kKChNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW4pIC8gdGhpcy5mb29kU2l6ZSkgKiB0aGlzLmZvb2RTaXplO1xyXG5cdH1cclxufSIsImltcG9ydCBHYW1lIGZyb20gXCIuLi9jbGFzc2VzL0dhbWVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEtleWJvYXJkSGFuZGxlciB7XHJcblx0LyoqXHJcblx0ICogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdhbWUgaGFzIGFscmVhZHkgc3RhcnRlZC5cclxuXHQgKiBVc2VmdWwgZm9yIGhhbmRsaW5nIHRoZSBwYXVzZS9yZXN1bWUgZ2FtZSBzdGF0ZXMuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBnYW1lSGFzU3RhcnRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyBrZXlib2FyZCBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBzbmFrZSBnYW1lLlxyXG5cdCAqIEBwYXJhbSBzbmFrZUdhbWUgU25ha2UgZ2FtZSBpbnN0YW5jZSB0byBhdHRhY2ggdGhlIGV2ZW50IGxpc3RlbmVycyB0by5cclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHNuYWtlR2FtZTogR2FtZSkge1xyXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMpO1xyXG5cdCB9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgZ2FtZSBzdGF0ZXMgYnkgbGlzdGVuaW5nIHRvIHRoZSBrZXlkb3duIGV2ZW50LlxyXG5cdCAqIEBwYXJhbSBldmVudCBUaGUga2V5Ym9hcmQgZXZlbnQgdGhhdCBnZXRzIGZpcmVkLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBoYW5kbGVFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG5cdFx0Y29uc3QgcHJlc3NlZEtleUNvZGU6IHN0cmluZyA9IGV2ZW50LmNvZGU7XHJcblxyXG5cdFx0aWYgKHByZXNzZWRLZXlDb2RlID09PSAnU3BhY2UnKSB7XHJcblx0XHRcdHRoaXMuaGFuZGxlU3BhY2ViYXIoKTtcclxuXHRcdH1cclxuXHJcblx0XHRlbHNlIGlmIChwcmVzc2VkS2V5Q29kZSA9PT0gJ0tleVInKSB7XHJcblx0XHRcdHRoaXMuaGFuZGxlUktleSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFycm93IGtleXMgYXJlIHByZXNzZWQgaW4gdGhpcyBjYXNlXHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dGhpcy5zbmFrZUdhbWUuc25ha2UuY2hhbmdlRGlyZWN0aW9uKHByZXNzZWRLZXlDb2RlKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogU3RhcnRzL1BhdXNlcy9SZXN1bWVzIHRoZSBnYW1lLlxyXG5cdCAqIEBwYXJhbSBwcmVzc2VkS2V5Q29kZSBDb2RlIGZvciB0aGUgcHJlc3NlZCBrZXkgKHNwYWNlKS5cclxuXHQgKi9cclxuXHRwcml2YXRlIGhhbmRsZVNwYWNlYmFyKCk6IHZvaWQge1xyXG5cdFx0XHJcblx0XHQvKiBcclxuXHRcdFx0SSB3YW50IHRvIG1ha2UgdG9nZ2xpbmcgdGhlIGRhcmsgbW9kZSBzd2l0Y2ggcG9zc2libGUgdGhyb3VnaCB0aGUgc3BhY2ViYXIga2V5LFxyXG5cdFx0XHRidXQgSSBkb24ndCB3YW50IHRoZSBnYW1lIHRvIHN0YXJ0L2JlIHBhdXNlZCB3aGVuIHVzZXJzIHN3aXRjaCB0aGlzIGJ1dHRvbiB1c2luZyB0aGUgc3BhY2ViYXIuIFRoZXkgXHJcblx0XHRcdHdvdWxkIGhhdmUgdG8gY2xpY2sgc29tZXRoaW5nIGVsc2Ugb24gdGhlIHNjcmVlbiB0byBiZSBhYmxlIHRvIHN0YXJ0L3BhdXNlIHRoZSBnYW1lLlxyXG5cdFx0Ki9cclxuXHRcdFxyXG5cdFx0aWYgKGlzRGFya01vZGVJbnB1dEZvY3VzZWQoKSkgcmV0dXJuO1xyXG5cclxuXHRcdC8vIFN0YXJ0IHRoZSBnYW1lIGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgeWV0XHJcblx0XHRpZiAodGhpcy5nYW1lSGFzU3RhcnRlZCA9PT0gZmFsc2UpIHtcclxuXHRcdFx0dGhpcy5zbmFrZUdhbWUuc3RhcnQoKTtcclxuXHRcdFx0dGhpcy5nYW1lSGFzU3RhcnRlZCA9IHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUGF1c2UgdGhlIGdhbWUgaWYgaXQgaGFzIGFscmVhZHkgc3RhcnRlZCBhbmQgaXMgY3VycmVudGx5IHJ1bm5pbmdcclxuXHRcdGVsc2UgaWYgKHRoaXMuc25ha2VHYW1lLmlzR2FtZVJ1bm5pbmcoKSkge1xyXG5cdFx0XHR0aGlzLnNuYWtlR2FtZS5wYXVzZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFRoZSBnYW1lIGlzIHBhdXNlZCBpbiB0aGlzIGNhc2UsIHNvIHJlc3VtZSBpdFxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdHRoaXMuc25ha2VHYW1lLnJlc3VtZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVzdGFydHMgdGhlIGdhbWUuXHJcblx0ICogQHBhcmFtIHByZXNzZWRLZXlDb2RlIENvZGUgZm9yIHRoZSBwcmVzc2VkIGtleSAoUikuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBoYW5kbGVSS2V5KCk6IHZvaWQge1xyXG5cdFx0dGhpcy5zbmFrZUdhbWUucmVzdGFydCgpO1xyXG5cdFx0dGhpcy5nYW1lSGFzU3RhcnRlZCA9IGZhbHNlO1xyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgZGFyayBtb2RlIHN3aXRjaCBidXR0b24gaXMgZm9jdXNlZCBvciBub3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0RhcmtNb2RlSW5wdXRGb2N1c2VkKCkge1xyXG5cdGNvbnN0IGRhcmtNb2RlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGFya19tb2RlX2lucHV0JykhO1xyXG5cdHJldHVybiBkYXJrTW9kZUlucHV0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xyXG59IiwiaW1wb3J0IEdhbWUgZnJvbSBcIi4uL2NsYXNzZXMvR2FtZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG91Y2hIYW5kbGVyIHtcclxuXHQvKipcclxuXHQgKiBUaGUgZGl2IHRoYXQgY29udGFpbnMgY29udHJvbCBhcnJvd3MgZm9yIG1vYmlsZSBzY3JlZW5zLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgbW9iaWxlQXJyb3dzRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vYmlsZS1hcnJvd3MnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIHBhdXNlIGFuZCBzdGFydCBidXR0b25zIG9uIG1vYmlsZSBzY3JlZW5zLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgZ2FtZUNvbnRyb2xCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmdhbWUtY29udHJvbHMtY29udGFpbmVyIGJ1dHRvbicpIGFzIE5vZGVMaXN0T2Y8SFRNTEJ1dHRvbkVsZW1lbnQ+O1xyXG5cclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0b3VjaCBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBzbmFrZSBnYW1lLlxyXG5cdCAqIEBwYXJhbSBzbmFrZUdhbWUgU25ha2UgZ2FtZSBpbnN0YW5jZSB0byBhdHRhY2ggdGhlIGV2ZW50IGxpc3RlbmVycyB0by5cclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHNuYWtlR2FtZTogR2FtZSkge1xyXG5cdFx0dGhpcy5tb2JpbGVBcnJvd3NEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQ6IEV2ZW50KSA9PiB0aGlzLmhhbmRsZUFycm93c0V2ZW50KGV2ZW50KSk7XHJcblxyXG5cdFx0dGhpcy5nYW1lQ29udHJvbEJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XHJcblx0XHRcdGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudDogRXZlbnQpID0+IHtcclxuXHRcdFx0XHRjb25zdCBldmVudENvZGUgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxCdXR0b25FbGVtZW50KS5kYXRhc2V0LnRvZ2dsZSE7XHJcblx0XHRcdFx0dGhpcy5oYW5kbGVHYW1lQ29udHJvbEJ1dHRvbnMoZXZlbnRDb2RlKTtcclxuXHRcdFx0fSlcclxuXHRcdH0pXHJcblx0IH1cclxuXHJcblx0cHJpdmF0ZSBoYW5kbGVBcnJvd3NFdmVudChldmVudDogRXZlbnQpOiB2b2lkIHtcclxuXHRcdC8vIEV2ZW50IHRhcmdldCBtaWdodCBiZSBhbiBzdmcgZWxlbWVudCwgYnV0IEkgd2FudCB0aGUgcGFyZW50IGJ1dHRvbiBlbGVtZW50IGluc3RlYWQuXHJcblx0XHRjb25zdCBldmVudFRhcmdldCA9IChldmVudC50YXJnZXQgYXMgSFRNTERpdkVsZW1lbnQpLmNsb3Nlc3QoJ2J1dHRvbicpITtcclxuXHRcdFxyXG5cdFx0aWYgKGV2ZW50VGFyZ2V0ICE9PSBudWxsICYmIGV2ZW50VGFyZ2V0LmRhdGFzZXQuY29kZSkge1xyXG5cdFx0XHR0aGlzLnNuYWtlR2FtZS5zbmFrZS5jaGFuZ2VEaXJlY3Rpb24oZXZlbnRUYXJnZXQuZGF0YXNldC5jb2RlKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgaGFuZGxlR2FtZUNvbnRyb2xCdXR0b25zKGJ1dHRvbkNvZGU6IHN0cmluZyk6IHZvaWQge1xyXG5cdFx0bGV0IGNvZGU7XHJcblx0XHRpZiAoYnV0dG9uQ29kZSA9PT0gJ3N0YXJ0JykgY29kZSA9ICdTcGFjZSc7XHJcblx0XHRlbHNlIGlmIChidXR0b25Db2RlID09PSAncmVzdGFydCcpIGNvZGUgPSAnS2V5Uic7XHJcblxyXG5cdFx0ZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgS2V5Ym9hcmRFdmVudCgna2V5ZG93bicsIHtcclxuXHRcdFx0Y29kZTogY29kZVxyXG5cdFx0fSkpXHJcblx0fVxyXG5cclxufSIsImltcG9ydCBHYW1lIGZyb20gXCIuLi9jbGFzc2VzL0dhbWVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjb3JlSGFuZGxlciB7XHJcblx0LyoqXHJcblx0ICogVGhlIHNwYW4gdGhhdCBjb250YWlucyB0aGUgZ2FtZSdzIHNjb3JlLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgc2NvcmVTcGFuOiBIVE1MU3BhbkVsZW1lbnQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBzcGFuIHRoYXQgY29udHJvbHMgdGhlIGdhbWUncyBzY29yZSBhbmltYXRpb24uXHJcblx0ICovXHJcblx0cHJpdmF0ZSBzY29yZUFuaW1hdGlvblNwYW46IEhUTUxTcGFuRWxlbWVudDtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIHNvdW5kIGVmZmVjdCB0byBwbGF5IHdoZW4gdGhlIHNuYWtlIGVhdHMgYSBwaWVjZSBvZiBmb29kLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgZm9vZEVhdGVuQXVkaW8gPSBuZXcgQXVkaW8oJy9kaXN0L3NvdW5kcy9lYXQtZm9vZC53YXYnKTtcclxuXHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgc2NvcmUgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgc25ha2UgZ2FtZS5cclxuXHQgKiBAcGFyYW0gc25ha2VHYW1lIFNuYWtlIGdhbWUgaW5zdGFuY2UgdG8gYXR0YWNoIHRoZSBldmVudCBsaXN0ZW5lcnMgdG8uXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBzbmFrZUdhbWU6IEdhbWUpIHsgXHJcblx0XHR0aGlzLnNjb3JlU3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY29yZScpITtcclxuXHRcdHRoaXMuc2NvcmVBbmltYXRpb25TcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjb3JlLWFuaW1hdGlvbicpITtcclxuXHJcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb29kLWVhdGVuJywgKCkgPT4gdGhpcy5pbmNyZWFzZVNjb3JlKCkpO1xyXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVzZXQtc2NvcmUnLCAoKSA9PiB0aGlzLnJlc2V0U2NvcmUoKSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBJbmNyZWFzZXMgdGhlIHBsYXllcidzIHNjb3JlIGJ5IDEuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBpbmNyZWFzZVNjb3JlKCk6IHZvaWQge1xyXG5cdFx0bGV0IGN1cnJlbnRTY29yZSA9IHRoaXMuc2NvcmVTcGFuLmlubmVySFRNTDtcclxuXHRcdGxldCBuZXdTY29yZSA9IHBhcnNlSW50KGN1cnJlbnRTY29yZSkgKyAxO1xyXG5cclxuXHRcdHRoaXMuc2NvcmVTcGFuLmlubmVySFRNTCA9IG5ld1Njb3JlLnRvU3RyaW5nKCk7XHJcblx0XHR0aGlzLnBsYXlTY29yZUFuaW1hdGlvbigpO1xyXG5cdFx0dGhpcy5mb29kRWF0ZW5BdWRpby5wbGF5KCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZXNldHMgdGhlIHBsYXllcidzIHNjb3JlIHRvIDAuXHJcblx0ICovXHJcblx0cHJpdmF0ZSByZXNldFNjb3JlKCk6IHZvaWQge1xyXG5cdFx0dGhpcy5zY29yZVNwYW4uaW5uZXJIVE1MID0gJzAnO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUGxheXMgdGhlICsxIHNjb3JlIGFuaW1hdGlvbi5cclxuXHQgKi9cclxuXHRwcml2YXRlIHBsYXlTY29yZUFuaW1hdGlvbigpIHtcclxuXHRcdHRoaXMuc2NvcmVBbmltYXRpb25TcGFuLmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGVkJyk7XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIHRoZSBhbmltYXRpb24gY2xhc3MgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBlbmRzLlxyXG5cdFx0dGhpcy5zY29yZUFuaW1hdGlvblNwYW4uYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnNjb3JlQW5pbWF0aW9uU3Bhbi5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlZCcpO1xyXG5cdFx0fSlcclxuXHR9XHJcbn0iLCJpbXBvcnQgR2FtZSBmcm9tIFwiLi4vY2xhc3Nlcy9HYW1lXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaWZmaWN1bHR5SGFubGRlciB7XHJcblx0LyoqXHJcblx0ICogVGhlIG1vZGFsIHRoYXQgY29udGFpbnMgdGhlIG9wdGlvbnMgb2YgdGhlIGdhbWUuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBvcHRpb25zTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3B0aW9ucycpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgYnV0dG9uIHRoYXQgb3BlbnMgdGhlIG9wdGlvbnMgbW9kYWwuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBvcHRpb25zTW9kYWxPcGVuQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ0bi0tb3Blbi1tb2RhbCcpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgYnV0dG9uIHRoYXQgY2xvc2VzIHRoZSBvcHRpb25zIG1vZGFsLiBJdCdzIHBsYWNlZCBpbnNpZGUgdGhlIG1vZGFsIGl0c2VsZi5cclxuXHQgKi9cclxuXHRwcml2YXRlIG9wdGlvbnNNb2RhbENsb3NlQnV0dG9uPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnRuLS1jbG9zZS1tb2RhbCcpIGFzIEhUTUxCdXR0b25FbGVtZW50OztcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIHRoZW1lIHRvZ2dsZSBidXR0b24uXHJcblx0ICovXHJcblx0cHJpdmF0ZSBkYXJrTW9kZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhcmtfbW9kZV9pbnB1dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBzZWxlY3QgdGFnIHRoYXQgY2hhbmdlcyB0aGUgZ2FtZSdzIGRpZmZpY3VsdHkuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBkaWZmaWN1bHR5Q29udHJvbGxlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWRpZmZpY3VsdHknKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcclxuXHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgb3B0aW9ucyBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBzbmFrZSBnYW1lLlxyXG5cdCAqIEBwYXJhbSBzbmFrZUdhbWUgU25ha2UgZ2FtZSBpbnN0YW5jZSB0byBhdHRhY2ggdGhlIGV2ZW50IGxpc3RlbmVycyB0by5cclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHNuYWtlR2FtZTogR2FtZSkgeyBcclxuXHRcdC8vIE9wdGlvbnMgbW9kYWwgY2xvc2UgYW5kIG9wZW4gYnV0dG9uc1xyXG5cdFx0dGhpcy5vcHRpb25zTW9kYWxPcGVuQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50OiBFdmVudCkgPT4gdGhpcy5vcGVuT3B0aW9uc01vZGFsKCkpO1xyXG5cdFx0dGhpcy5vcHRpb25zTW9kYWxDbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudDogRXZlbnQpID0+IHRoaXMuY2xvc2VPcHRpb25zTW9kYWwoKSk7XHJcblxyXG5cdFx0Ly8gVGhlbWUgY2hhbmdlIGJ1dHRvblxyXG5cdFx0dGhpcy5kYXJrTW9kZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudDogRXZlbnQpID0+IHRoaXMuY2hhbmdlVGhlbWUoKSk7XHJcblxyXG5cdFx0Ly8gRGlmZmljdWx0eSBjb250cm9sbGVyXHJcblx0XHR0aGlzLmRpZmZpY3VsdHlDb250cm9sbGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudDogRXZlbnQpID0+IHRoaXMuY2hhbmdlRGlmZmljdWx0eShldmVudCkpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogT3BlbnMgdGhlIG9wdGlvbnMgbW9kYWwsIHdoaWNoIGNhdXNlcyB0aGUgZ2FtZSB0byBwYXVzZS5cclxuXHQgKi9cclxuXHRwcml2YXRlIG9wZW5PcHRpb25zTW9kYWwoKTogdm9pZCB7XHJcblx0XHR0aGlzLm9wdGlvbnNNb2RhbC5jbGFzc0xpc3QuYWRkKCdvcGVuJyk7XHJcblx0XHR0aGlzLnNuYWtlR2FtZS5wYXVzZSgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2xvc2VzIHRoZSBvcHRpb25zIG1vZGFsLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgY2xvc2VPcHRpb25zTW9kYWwoKTogdm9pZCB7XHJcblx0XHR0aGlzLm9wdGlvbnNNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdvcGVuJyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDaGFuZ2VzIHRoZSBnYW1lJ3MgdGhlbWUuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBjaGFuZ2VUaGVtZSgpOiB2b2lkIHtcclxuXHRcdHRoaXMuc25ha2VHYW1lLnN3aXRjaENvbG9yVGhlbWUoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENhbGxzIHRoZSBzbmFrZSBnYW1lJ3MgY2hhbmdlRGlmZmljdWx0eSBtZXRob2QuXHJcblx0ICogQHBhcmFtIGV2ZW50IFRoZSBkaWZmaWN1bHR5IGNvbnRyb2xsZXIncyBjaGFuZ2UgZXZlbnQuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBjaGFuZ2VEaWZmaWN1bHR5KGV2ZW50OiBFdmVudCk6IHZvaWQge1xyXG5cdFx0Y29uc3QgbmV3RGlmZmljdWx0eSA9IHRoaXMuZ2V0TmV3RGlmZmljdWx0eSgpO1xyXG5cclxuXHRcdHRoaXMuc25ha2VHYW1lLmNoYW5nZURpZmZpY3VsdHkobmV3RGlmZmljdWx0eSk7XHJcblx0XHR0aGlzLmRpZmZpY3VsdHlDb250cm9sbGVyLmJsdXIoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgdGhlIGRpZmZpY3VsdHkgdGhhdCB0aGUgdXNlciBzcGVjaWZpZXMuXHJcblx0ICogXHJcblx0ICogTm90ZSB0aGF0IGRpZmZpY3VsdHkgaXMgYSBudW1iZXIgdGhhdCBpbmRpY2F0ZXMgdGhlIGdhbWUgbG9vcCdzIHNwZWVkIGluIG1pbGxpc2Vjb25kcy5cclxuXHQgKi9cclxuXHRwcml2YXRlIGdldE5ld0RpZmZpY3VsdHkoKTogbnVtYmVyIHtcclxuXHRcdGNvbnN0IHNlbGVjdGVkRGlmZmljdWx0eUluZGV4ID0gdGhpcy5kaWZmaWN1bHR5Q29udHJvbGxlci5zZWxlY3RlZEluZGV4O1xyXG5cdFx0Y29uc3QgZGlmZmljdWx0eSA9IHRoaXMuZGlmZmljdWx0eUNvbnRyb2xsZXIub3B0aW9uc1tzZWxlY3RlZERpZmZpY3VsdHlJbmRleF0udmFsdWU7XHJcblxyXG5cdFx0cmV0dXJuIHBhcnNlSW50KGRpZmZpY3VsdHkpO1xyXG5cdH1cclxuXHJcbn0iLCJpbXBvcnQgU25ha2VHYW1lIGZyb20gXCIuL2NsYXNzZXMvR2FtZVwiO1xyXG5pbXBvcnQgU25ha2UgZnJvbSBcIi4vY2xhc3Nlcy9TbmFrZVwiO1xyXG5pbXBvcnQgQ2FudmFzIGZyb20gXCIuL2NsYXNzZXMvQ2FudmFzXCI7XHJcbmltcG9ydCB7IHJlZ2lzdGVyRXZlbnRIYW5kbGVycyB9IGZyb20gXCIuL2V2ZW50SGFuZGxlcnMvaW5kZXhcIjtcclxuXHJcblxyXG4vLyBSZWR1Y2UgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGNhbnZhcyBvbiBzbWFsbGVyIHNjcmVlbnMuIFRoaXMgb25seSBoYXBwZW5zIHdoZW4gdGhlIGdhbWUgaXMgbG9hZGVkLlxyXG5jb25zdCBtZWRpYVF1ZXJ5ID0gbWF0Y2hNZWRpYSgnKG1heC13aWR0aDogNTc2cHgpJyk7XHJcbmxldCBjYW52YXNXaWR0aDogbnVtYmVyO1xyXG5sZXQgY2FudmFzSGVpZ2h0OiBudW1iZXI7XHJcblxyXG5pZiAobWVkaWFRdWVyeS5tYXRjaGVzKSB7XHJcblx0Y2FudmFzV2lkdGggPSBjYW52YXNIZWlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIDUwO1xyXG59XHJcblxyXG5lbHNlIHtcclxuXHRjYW52YXNXaWR0aCA9IGNhbnZhc0hlaWdodCA9IDUwMDtcclxufVxyXG5cclxuY29uc3QgY2FudmFzID0gbmV3IENhbnZhcygnc25ha2VCb2FyZCcsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xyXG5jb25zdCBzbmFrZSA9IG5ldyBTbmFrZSgyMCwgJ2RhcmtncmVlbicsICd5ZWxsb3cnKTtcclxuY29uc3Qgc25ha2VHYW1lID0gbmV3IFNuYWtlR2FtZShzbmFrZSwgY2FudmFzKTtcclxuXHJcbnJlZ2lzdGVyRXZlbnRIYW5kbGVycyhzbmFrZUdhbWUpOyIsImltcG9ydCB7IERyYXdhYmxlLCBDb2xvclRoZW1lIH0gZnJvbSBcIi4uL21vZGVscy9pbmRleFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzIHtcclxuXHQvKipcclxuXHQgKiBUaGUgY2FudmFzJyBET00gZWxlbWVudCByZWZlcmVuY2UuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgYWN0dWFsIDJEIGNvbnRleHQgdXBvbiB3aGljaCB3ZSBkcmF3IHRoaW5ncyBpbiB0aGUgY2FudmFzLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBjb2xvciB0aGVtZSBvZiB0aGUgY2FudmFzLiBTdXBwb3J0ZWQgdmFsdWVzIGFyZSBkYXJrIGFuZCB3aGl0ZS5cclxuXHQgKi9cclxuXHRwcml2YXRlIGNvbG9yVGhlbWU6IENvbG9yVGhlbWUgPSAnd2hpdGUnO1xyXG5cclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgY2FudmFzJyAyRCBjb250ZXh0IGFuZCBET00gcmVmZXJlbmNlLlxyXG5cdCAqIEBwYXJhbSBpZCBJRCBvZiB0aGUgY2FudmFzJyBET00gZWxlbWVudC5cclxuXHQgKiBAcGFyYW0gd2lkdGggV2lkdGggb2YgdGhlIGNhbnZhcy5cclxuXHQgKiBAcGFyYW0gaGVpZ2h0IEhlaWdodCBvZiB0aGUgY2FudmFzLlxyXG5cdCAqIEBwYXJhbSBiYWNrZ3JvdW5kQ29sb3IgQmFja2dyb3VuZCBjb2xvciBvZiB0aGUgY2FudmFzXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoXHRcclxuXHRcdGlkOiBzdHJpbmcgPSAnc25ha2VCb2FyZCcsXHJcblxyXG5cdFx0cHVibGljIHJlYWRvbmx5IHdpZHRoOiBudW1iZXIgPSAzMDAsXHJcblx0XHRwdWJsaWMgcmVhZG9ubHkgaGVpZ2h0OiBudW1iZXIgPSAzMDAsXHJcblx0XHRcclxuXHRcdHByaXZhdGUgYmFja2dyb3VuZENvbG9yOiBzdHJpbmcgPSAnI2JlODk4NCcsXHJcblx0KSB7XHJcblx0XHRcclxuXHRcdHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG5cdFx0dGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIGFzIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuXHJcblx0XHR0aGlzLmFkanVzdERpbWVuc2lvbnModGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2V0cyB0aGUgY29ycmVjdCB3aWR0aCBhbmQgaGVpZ2h0IHZhbHVlcyBmb3IgdGhlIGNhbnZhcy5cclxuXHQgKiBAcGFyYW0gd2lkdGggV2lkdGggb2YgdGhlIGNhbnZhcy5cclxuXHQgKiBAcGFyYW0gaGVpZ2h0IEhlaWdodCBvZiB0aGUgY2FudmFzLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBhZGp1c3REaW1lbnNpb25zKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZCB7XHJcblx0XHQvLyBUaGVzZSBhcmUgaHRtbCBhdHRyaWJ1dGVzLCB3aGljaCBhcmUgcmVxdWlyZWQgZm9yIHByb3BlciByZW5kZXJpbmcgb2YgdGhlIGNhbnZhcyBlbGVtZW50LlxyXG5cdFx0dGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHdpZHRoLnRvU3RyaW5nKCkpO1xyXG5cdFx0dGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBoZWlnaHQudG9TdHJpbmcoKSk7XHJcblxyXG5cdFx0Ly8gVGhlc2UgYXJlIHRoZSBjc3MgcHJvcGVydGllcyBmb3IgdGhlIHJlYWwgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzLlxyXG5cdFx0dGhpcy5jYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XHJcblx0XHR0aGlzLmNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2xlYXJzIHRoZSBjYW52YXMgYW5kIHJlbW92ZXMgYW55IGRyYXduIGVsZW1lbnQuXHJcblx0ICovXHJcblx0cHVibGljIGNsZWFyKCk6IHZvaWQge1xyXG5cdFx0dGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5iYWNrZ3JvdW5kQ29sb3I7XHJcblx0XHR0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDYWxscyB0aGUgcmVuZGVyaW5nIGZ1bmN0aW9uIG9mIHRoZSBlbGVtZW50IHRoYXQgeW91IHdhbnQgdG8gZHJhdyBvbiB0aGUgY2FudmFzLlxyXG5cdCAqIEBwYXJhbSBlbGVtZW50IEVsZW1lbnQgdG8gYmUgcmVuZGVyZWQgb24gdGhlIGNhbnZhcy5cclxuXHQgKi9cclxuXHRwdWJsaWMgZHJhd0VsZW1lbnQoZWxlbWVudDogRHJhd2FibGUpOiB2b2lkIHtcclxuXHRcdGVsZW1lbnQuZHJhd09uQ2FudmFzKHRoaXMuY3R4KTtcclxuXHR9XHJcblxyXG5cdC8qIC0tIENPTE9SIFRIRU1FIExPR0lDIC0tICovXHJcblx0XHJcblx0cHJpdmF0ZSBzZXRXaGl0ZU1vZGUoKTogdm9pZCB7XHJcblx0XHR0aGlzLmJhY2tncm91bmRDb2xvciA9ICcjYmU4OTg0JztcclxuXHRcdHRoaXMuY29sb3JUaGVtZSA9ICd3aGl0ZSc7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHNldERhcmtNb2RlKCk6IHZvaWQge1xyXG5cdFx0dGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSAnYmxhY2snO1xyXG5cdFx0dGhpcy5jb2xvclRoZW1lID0gJ2RhcmsnO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVXBkYXRlcyB0aGUgY29sb3JzIG9mIHRoZSBjYW52YXMgdG8gbWF0Y2ggdGhlIG5ldyB0aGVtZVxyXG5cdCAqL1xyXG5cdHB1YmxpYyBzd2l0Y2hDb2xvclRoZW1lKCk6IHZvaWQge1xyXG5cdFx0aWYgKHRoaXMuY29sb3JUaGVtZSA9PSAnd2hpdGUnKSB7XHJcblx0XHRcdHRoaXMuc2V0RGFya01vZGUoKTtcclxuXHRcdH1cclxuXHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dGhpcy5zZXRXaGl0ZU1vZGUoKTtcclxuXHRcdH1cclxuXHR9XHJcbn0iLCJpbXBvcnQgeyBUaWxlLCBEcmF3YWJsZSB9IGZyb20gXCIuLi9tb2RlbHMvaW5kZXhcIjtcclxuaW1wb3J0IEZvb2QgZnJvbSAnLi9Gb29kJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNuYWtlIGltcGxlbWVudHMgRHJhd2FibGUge1xyXG5cdC8qKlxyXG5cdCAqIFRoZSBpbml0aWFsIFggY29vcmRpbmF0ZSBmb3IgdGhlIGZpcnN0IHRpbGUgb2YgdGhlIHNuYWtlLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgaW5pdGlhbFhQb3M6IG51bWJlciA9IDEwMDtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGluaXRpYWwgWSBjb29yZGluYXRlIGZvciB0aGUgZmlyc3QgdGlsZSBvZiB0aGUgc25ha2UuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBpbml0aWFsWVBvczogbnVtYmVyID0gMTAwO1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgbnVtYmVyIG9mIHN0YXJ0aW5nIHRpbGVzIGluIHRoZSBzbmFrZSdzIGFycmF5LlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgbnVtT2ZTdGFydGluZ0Jsb2NrczogbnVtYmVyID0gNDtcclxuXHJcblx0LyoqXHJcblx0ICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNuYWtlIGlzIGdvaW5nIHVwIG9yIGRvd24uXHJcblx0ICovXHJcblx0cHJpdmF0ZSB2ZXJ0aWNhbFNwZWVkOiBudW1iZXIgPSAwO1xyXG5cclxuXHQvKipcclxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc25ha2UgaXMgZ29pbmcgbGVmdCBvciByaWdodC5cclxuXHQgKi9cclxuXHRwcml2YXRlIGhvcml6b250YWxTcGVlZDogbnVtYmVyID0gKC0xKSAqIHRoaXMudGlsZVNpemU7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBzbmFrZSdzIHRpbGVzJyBhcnJheS5cclxuXHQgKi9cclxuXHRwcml2YXRlIF90aWxlczogVGlsZVtdID0gW107XHJcblx0XHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgYSBuZXcgc25ha2UgYW5kIGFkanVzdHMgaXRzIGNvb3JkaW5hdGVzLlxyXG5cdCAqIEBwYXJhbSB0aWxlU2l6ZSBUaGUgc25ha2UncyB0aWxlIHNpemUgaW4gcGl4ZWxzLlxyXG5cdCAqIEBwYXJhbSB0aWxlQ29sb3IgVGhlIGNvbG9yIG9mIG5vcm1hbCB0aWxlcy5cclxuXHQgKiBAcGFyYW0gaGVhZENvbG9yIFRoZSBjb2xvciBvZiB0aGUgZmlyc3QgdGlsZSAodGhlIGhlYWQpLlxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0cHVibGljIHJlYWRvbmx5IHRpbGVTaXplOiBudW1iZXIsXHJcblx0XHRwcml2YXRlIHRpbGVDb2xvcjogc3RyaW5nLFxyXG5cdFx0cHJpdmF0ZSBoZWFkQ29sb3I6IHN0cmluZyxcclxuXHQpIHtcclxuXHRcdHRoaXMucmVzZXRDb29yZGluYXRlcygpO1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIHRoZSBzbmFrZSdzIHRpbGVzJyBhcnJheS5cclxuXHQgKi9cclxuXHRnZXQgdGlsZXMoKTogVGlsZVtdIHtcclxuXHRcdHJldHVybiB0aGlzLl90aWxlcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgdGhlIHNuYWtlJ3MgaGVhZCB0aWxlLlxyXG5cdCAqL1xyXG5cdGdldCBzbmFrZUhlYWQoKTogVGlsZSB7XHJcblx0XHRyZXR1cm4gdGhpcy50aWxlc1swXTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgd2hldGhlciB0aGUgc25ha2UgaGFzIGVhdGVuIGEgcGllY2Ugb2YgZm9vZCBvciBub3QuXHJcblx0ICogQHBhcmFtIG5ld0hlYWQgTmV3IGhlYWQgdGlsZSBhZnRlciB0aGUgc25ha2UgbW92ZXMuXHJcblx0ICogQHBhcmFtIGZvb2QgVGhlIGN1cnJlbnQgcGllY2Ugb2YgZm9vZCBvbiB0aGUgY2FudmFzLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgaGFzU25ha2VFYXRlbkZvb2QobmV3SGVhZDogVGlsZSwgZm9vZDogRm9vZCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIG5ld0hlYWQueCA9PT0gZm9vZC54Q29vcmRpbmF0ZSAmJiBuZXdIZWFkLnkgPT09IGZvb2QueUNvb3JkaW5hdGU7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBEaXNwYXRjaGVzIGEgJ2Zvb2QtZWF0ZW4nIGV2ZW50IGluIG9yZGVyIGZvciB0aGUgc2NvcmUgdG8gaW5jcmVhc2UuXHJcblx0ICogXHJcblx0ICogVGhlIGxpc3RlbmVyIGZvciB0aGlzIGV2ZW50IGlzIGluIHRoZSBTY29yZUhhbmRsZXIgY2xhc3MuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBkaXNwYXRjaEZvb2RFYXRlbkV2ZW50KCk6IHZvaWQge1xyXG5cdFx0ZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2Zvb2QtZWF0ZW4nKSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBEcmF3cyBhbiBpbmRpdmlkdWFsIHNuYWtlIHRpbGUgb24gdGhlIGNhbnZhcy5cclxuXHQgKiBAcGFyYW0gdGlsZSBUaGUgc25ha2UgdGlsZSB0byBiZSBkcmF3bi5cclxuXHQgKiBAcGFyYW0gdGlsZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgdGlsZSB0byBiZSBkcmF3biAodXNlZnVsIHRvIGtub3cgaWYgaXQncyB0aGUgaGVhZCB0aWxlKS5cclxuXHQgKiBAcGFyYW0gcGFyZW50Q2FudmFzQ29udGV4dCBUaGUgMkQgY29udGV4dCBvZiB0aGUgY2FudmFzIHVwb24gd2hpY2ggdGhlIHRpbGUgd2lsbCBiZSBkcmF3bi5cclxuXHQgKi9cclxuXHRwcml2YXRlIGRyYXdTbmFrZVRpbGUodGlsZTogVGlsZSwgdGlsZUluZGV4OiBudW1iZXIsIHBhcmVudENhbnZhc0NvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xyXG5cdFx0cGFyZW50Q2FudmFzQ29udGV4dC5maWxsU3R5bGUgPSB0aWxlSW5kZXggPT09IDAgPyB0aGlzLmhlYWRDb2xvciA6IHRoaXMudGlsZUNvbG9yO1xyXG5cdFx0cGFyZW50Q2FudmFzQ29udGV4dC5zdHJva2VTdHlsZSA9ICdkYXJrYmx1ZSc7XHJcblx0XHRcclxuXHRcdGNvbnN0IHsgeCwgeSB9ID0gdGlsZTtcclxuXHRcdHBhcmVudENhbnZhc0NvbnRleHQuZmlsbFJlY3QoeCwgeSwgdGhpcy50aWxlU2l6ZSwgdGhpcy50aWxlU2l6ZSk7XHJcblx0XHRwYXJlbnRDYW52YXNDb250ZXh0LnN0cm9rZVJlY3QoeCwgeSwgdGhpcy50aWxlU2l6ZSwgdGhpcy50aWxlU2l6ZSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBEcmF3cyB0aGUgd2hvbGUgc25ha2Ugb24gdGhlIGNhbnZhcy5cclxuXHQgKiBAcGFyYW0gY29udGV4dCBUaGUgMkQgY29udGV4dCBvZiB0aGUgY2FudmFzIHVwb24gd2hpY2ggdGhlIHRpbGUgd2lsbCBiZSBkcmF3bi5cclxuXHQgKi9cclxuXHRwdWJsaWMgZHJhd09uQ2FudmFzKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xyXG5cdFx0dGhpcy50aWxlcy5mb3JFYWNoKCh0aWxlLCB0aWxlSW5kZXgpID0+IHtcclxuXHRcdFx0dGhpcy5kcmF3U25ha2VUaWxlKHRpbGUsIHRpbGVJbmRleCwgY29udGV4dCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIE1vdmVzIHRoZSB0aWxlcyBvZiB0aGUgc25ha2UuXHJcblx0ICogQHBhcmFtIGZvb2QgVGhlIHBpZWNlIG9mIGZvb2QgdGhhdCB0aGUgc25ha2Ugd2lsbCBlYXQuXHJcblx0ICovXHJcblx0cHVibGljIG1vdmUoZm9vZDogRm9vZCk6IHZvaWQge1xyXG5cdFx0Y29uc3QgbmV3SGVhZDogVGlsZSA9IHtcclxuXHRcdFx0eDogdGhpcy50aWxlc1swXS54ICsgdGhpcy5ob3Jpem9udGFsU3BlZWQsXHJcblx0XHRcdHk6IHRoaXMudGlsZXNbMF0ueSArIHRoaXMudmVydGljYWxTcGVlZFxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudGlsZXMudW5zaGlmdChuZXdIZWFkKTtcclxuXHJcblx0XHQvLyBHZW5lcmF0ZSBhIG5ldyBwaWVjZSBvZiBmb29kIGFuZCBpbmNyZWFzZSBzY29yZSBpZiB0aGUgc25ha2UgaGFzIGVhdGVuIHRoZSBmb29kXHJcblx0XHRpZiAodGhpcy5oYXNTbmFrZUVhdGVuRm9vZChuZXdIZWFkLCBmb29kKSkge1xyXG5cdFx0XHRmb29kLmdlbmVyYXRlQ29vcmRpbmF0ZXModGhpcy50aWxlcyk7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hGb29kRWF0ZW5FdmVudCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFRoZSBzbmFrZSBtb3ZlcyBub3JtYWxseSBpbiB0aGlzIGNhc2VcclxuXHRcdGVsc2Uge1xyXG5cdFx0XHR0aGlzLnRpbGVzLnBvcCgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVzZXRzIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHNuYWtlLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgcmVzZXREaXJlY3Rpb24oKTogdm9pZCB7XHJcblx0XHR0aGlzLmhvcml6b250YWxTcGVlZCA9ICgtMSkgKiB0aGlzLnRpbGVTaXplO1xyXG5cdFx0dGhpcy52ZXJ0aWNhbFNwZWVkID0gMDtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlc2V0cyB0aGUgY3VycmVudCB0aWxlcyBhcnJheSBhbmQgY3JlYXRlcyBhIG5ldyBvbmUgd2l0aCBuZXcgY29vcmRpbmF0ZXMuXHJcblx0ICovXHJcblx0cHVibGljIHJlc2V0Q29vcmRpbmF0ZXMoKTogdm9pZCB7XHJcblx0XHR0aGlzLnJlc2V0RGlyZWN0aW9uKCk7XHJcblx0XHR0aGlzLl90aWxlcyA9IFtdO1xyXG5cclxuXHRcdGxldCBmaXJzdFhQb3MgPSB0aGlzLmluaXRpYWxYUG9zO1xyXG5cdFx0bGV0IGZpcnN0WVBvcyA9IHRoaXMuaW5pdGlhbFlQb3M7XHJcblx0XHRcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1PZlN0YXJ0aW5nQmxvY2tzOyBpKyspIHtcclxuXHRcdFx0dGhpcy50aWxlcy5wdXNoKHtcclxuXHRcdFx0XHR4OiBmaXJzdFhQb3MsXHJcblx0XHRcdFx0eTogZmlyc3RZUG9zXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0Zmlyc3RYUG9zICs9IHRoaXMudGlsZVNpemU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDaGFuZ2VzIHRoZSBzbmFrZSdzIGRpcmVjdGlvbi4gTm90ZSB0aGF0IHRoZSBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBzcGVlZHMgaW4gdGhpcyBjbGFzcyByZXByZXNlbnQgZGlyZWN0aW9uc1xyXG5cdCAqIHdpdGggbmVnYXRpdmUgdmFsdWVzIGluZGljYXRpbmcgbGVmdCBhbmQgZG93bndhcmRzLCBhbmQgcG9zaXRpdmUgb25lcyBpbmRpY2F0aW5nIHJpZ2h0IGFuZCB1cHdhcmRzLlxyXG5cdCAqIEBwYXJhbSBwcmVzc2VkS2V5Q29kZSBUaGUgY29kZSBvZiB0aGUgcHJlc3NlZCBrZXkuXHJcblx0ICovXHJcblx0cHVibGljIGNoYW5nZURpcmVjdGlvbihwcmVzc2VkS2V5Q29kZTogc3RyaW5nKTogdm9pZCB7XHJcblxyXG5cdFx0Ly8gaWYgKHRoaXMuX2NoYW5naW5nRGlyZWN0aW9uKSByZXR1cm47IC8vdXNlZCB0byBwcmV2ZW50IHRoZSBzbmFrZSBmcm9tIGdvaW5nIGludG8gdGhlIHJldmVyc2UgZGlyZWN0aW9uLiBmb3IgZXhhbXBsZSwgZ29pbmcgdXAgYW5kIHRoZW4gZG93blxyXG5cdFx0Ly8gdGhlIHNuYWtlIHdvdWxkIGhhdmUgdG8gd2FpdCBmb3IgdGhpcyBmdW5jdGlvbiB0byByZXR1cm4gYW5kIGZvciB0aGUgR2FtZSBsb29wIHRvIHJ1biBhZ2FpbiB0byBiZSBhYmxlIHRvIGNoYW5nZSBkaXJlY3Rpb25cclxuXHRcdC8vIHRoaXMuX2NoYW5naW5nRGlyZWN0aW9uID0gdHJ1ZTtcclxuXHJcblx0XHRjb25zdCBnb2luZ1VwID0gdGhpcy52ZXJ0aWNhbFNwZWVkID09PSAoLTEpICogdGhpcy50aWxlU2l6ZTtcclxuXHRcdGNvbnN0IGdvaW5nRG93biA9IHRoaXMudmVydGljYWxTcGVlZCA9PT0gdGhpcy50aWxlU2l6ZTtcclxuXHRcdGNvbnN0IGdvaW5nUmlnaHQgPSB0aGlzLmhvcml6b250YWxTcGVlZCA9PT0gdGhpcy50aWxlU2l6ZTtcclxuXHRcdGNvbnN0IGdvaW5nTGVmdCA9IHRoaXMuaG9yaXpvbnRhbFNwZWVkID09PSAoLTEpICogdGhpcy50aWxlU2l6ZTtcclxuXHJcblx0XHRpZiAocHJlc3NlZEtleUNvZGUgPT09ICdBcnJvd0xlZnQnICYmICFnb2luZ1JpZ2h0KSB7XHJcblx0XHRcdHRoaXMuaG9yaXpvbnRhbFNwZWVkID0gKC0xKSAqIHRoaXMudGlsZVNpemU7XHJcblx0XHRcdHRoaXMudmVydGljYWxTcGVlZCA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0ZWxzZSBpZiAocHJlc3NlZEtleUNvZGUgPT09ICdBcnJvd1JpZ2h0JyAmJiAhZ29pbmdMZWZ0KSB7XHJcblx0XHRcdHRoaXMuaG9yaXpvbnRhbFNwZWVkID0gdGhpcy50aWxlU2l6ZTtcclxuXHRcdFx0dGhpcy52ZXJ0aWNhbFNwZWVkID0gMDtcclxuXHRcdH1cclxuXHJcblx0XHRlbHNlIGlmIChwcmVzc2VkS2V5Q29kZSA9PT0gJ0Fycm93VXAnICYmICFnb2luZ0Rvd24pIHtcclxuXHRcdFx0dGhpcy5ob3Jpem9udGFsU3BlZWQgPSAwO1xyXG5cdFx0XHR0aGlzLnZlcnRpY2FsU3BlZWQgPSAoLTEpICogdGhpcy50aWxlU2l6ZTtcclxuXHRcdH1cclxuXHJcblx0XHRlbHNlIGlmIChwcmVzc2VkS2V5Q29kZSA9PT0gJ0Fycm93RG93bicgJiYgIWdvaW5nVXApIHtcclxuXHRcdFx0dGhpcy5ob3Jpem9udGFsU3BlZWQgPSAwO1xyXG5cdFx0XHR0aGlzLnZlcnRpY2FsU3BlZWQgPSB0aGlzLnRpbGVTaXplO1xyXG5cdFx0fVxyXG5cdH1cclxufSIsImltcG9ydCBHYW1lIGZyb20gXCIuLi9jbGFzc2VzL0dhbWVcIjtcclxuaW1wb3J0IEtleWJvYXJkSGFuZGxlciBmcm9tIFwiLi9LZXlib2FyZEhhbmRsZXJcIjtcclxuaW1wb3J0IFRvdWNoSGFuZGxlciBmcm9tIFwiLi9Ub3VjaEhhbmRsZXJcIjtcclxuaW1wb3J0IFNjb3JlSGFuZGxlciBmcm9tIFwiLi9TY29yZUhhbmRsZXJcIjtcclxuaW1wb3J0IE9wdGlvbnNIYW5kbGVyIGZyb20gXCIuL09wdGlvbnNIYW5kbGVyXCI7XHJcblxyXG4vKipcclxuICogUmVnaXN0ZXJzIHRvdWNoLCBrZXlib2FyZCwgdGhlbWUsIGFuZCBzY29yZSBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBgc25ha2VHYW1lYCBwYXJhbWV0ZXIuXHJcbiAqIEBwYXJhbSBzbmFrZUdhbWUgVGhlIHNuYWtlIGdhbWUgaW5zdGFuY2UgdG8gYWRkIGV2ZW50IGxpc3RlbmVycyB0by5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckV2ZW50SGFuZGxlcnMoc25ha2VHYW1lOiBHYW1lKTogdm9pZCB7XHJcblxyXG5cdC8qIC0tIENvbnRyb2xzIC0tICovXHJcblx0Y29uc3Qga2V5Ym9hcmRIYW5kbGVyID0gbmV3IEtleWJvYXJkSGFuZGxlcihzbmFrZUdhbWUpO1xyXG5cdGNvbnN0IHRvdWNoSGFuZGxlciA9IG5ldyBUb3VjaEhhbmRsZXIoc25ha2VHYW1lKTtcclxuXHJcblx0LyogLS0gU2NvcmUgLS0gKi9cclxuXHRjb25zdCBzY29yZUhhbmRsZXIgPSBuZXcgU2NvcmVIYW5kbGVyKHNuYWtlR2FtZSk7XHJcblxyXG5cdC8qIC0tIE9wdGlvbnMgLS0gKi9cclxuXHRjb25zdCBvcHRpb25zSGFuZGxlciA9IG5ldyBPcHRpb25zSGFuZGxlcihzbmFrZUdhbWUpO1xyXG5cdFxyXG59IiwiaW1wb3J0IFNuYWtlIGZyb20gXCIuL1NuYWtlXCI7XHJcbmltcG9ydCBDYW52YXMgZnJvbSBcIi4vQ2FudmFzXCI7XHJcbmltcG9ydCBGb29kIGZyb20gXCIuL0Zvb2RcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUge1xyXG5cdC8qKlxyXG5cdCAqIFRoZSBnYW1lJ3MgcGllY2Ugb2YgZm9vZC5cclxuXHQgKi9cclxuXHRwcml2YXRlIGZvb2Q6IEZvb2Q7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBtYWluIGdhbWUgbG9vcC5cclxuXHQgKi9cclxuXHRwcml2YXRlIGdhbWVJbnRlcnZhbCE6IFJldHVyblR5cGU8IHR5cGVvZiBzZXRJbnRlcnZhbCA+O1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgZ2FtZSBsb29wJ3Mgc3BlZWQsIGluIG1pbGxpc2Vjb25kcy5cclxuXHQgKi9cclxuXHRwcml2YXRlIGdhbWVTcGVlZDogbnVtYmVyID0gMzAwO1xyXG5cclxuXHQvKipcclxuXHQgKiBBIGZsYWcgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZ2FtZSBpcyBydW5uaW5nIG9yIG5vdC5cclxuXHQgKi9cclxuXHRwcml2YXRlIHJ1bm5pbmchOiBib29sZWFuO1xyXG5cclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyBhIG5ldyBwaWVjZSBvZiBmb29kIGFuZCByZW5kZXJzIGEgc3RhdGljIHNuYWtlIG9uIHRoZSBnYW1lJ3MgY2FudmFzLlxyXG5cdCAqIEBwYXJhbSBzbmFrZSBUaGUgZ2FtZSdzIHNuYWtlLlxyXG5cdCAqIEBwYXJhbSBjYW52YXMgVGhlIGdhbWUncyBjYW52YXMuXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHRwdWJsaWMgcmVhZG9ubHkgc25ha2U6IFNuYWtlLFxyXG5cdFx0cHJpdmF0ZSBjYW52YXM6IENhbnZhcyxcclxuXHQpIHtcclxuXHRcdHRoaXMuZm9vZCA9IG5ldyBGb29kKHRoaXMuc25ha2UudGlsZVNpemUsICdsaWdodGdyZWVuJywgJ3llbGxvdycsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG5cdFx0dGhpcy5pbml0aWFsUmVuZGVyKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDaGVja3MgaWYgdGhlIGdhbWUgc2hvdWxkIGNvbnRpbnVlIG9yIG5vdC5cclxuXHQgKiBcclxuXHQgKiBUaGUgZ2FtZSBzdG9wcyB3aGVuZXZlciB0aGUgc25ha2UgaGl0cyBhbnkgb2YgdGhlIGNhbnZhcycgYm91bmRhcmllcyBvciBlYXRzIGl0c2VsZi5cclxuXHQgKi9cclxuXHRwcml2YXRlIGhhc1NuYWtlR2FtZUVuZGVkKCk6IGJvb2xlYW4ge1xyXG5cdFx0Y29uc3QgaGVhZCA9IHRoaXMuc25ha2Uuc25ha2VIZWFkO1xyXG5cdFx0Y29uc3QgY29udGV4dDogR2FtZSA9IHRoaXM7XHJcblxyXG5cdFx0cmV0dXJuIHNuYWtlQXRlSXRzZWxmKGNvbnRleHQpIHx8IHNuYWtlSGl0Qm91bmRhcmllcyhjb250ZXh0KTtcclxuXHJcblxyXG5cdFx0ZnVuY3Rpb24gc25ha2VBdGVJdHNlbGYoY29udGV4dDogR2FtZSk6IGJvb2xlYW4ge1xyXG5cdFx0XHQvLyBUaGUgc25ha2UgY2FuIG9ubHkgZWF0IG9uZSBvZiBpdHMgb3duIHRpbGVzIGlmIGl0cyBsZW5ndGggaXMgPiA0XHJcblx0XHRcdGZvciAobGV0IGkgPSA0OyBpIDwgY29udGV4dC5zbmFrZS50aWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdC8vIENoZWNraW5nIGlmIHRoZSBzbmFrZSdzIGhlYWQgY29sbGlkZXMgd2l0aCBhbnkgb2YgaXRzIG90aGVyIHRpbGVzXHJcblx0XHRcdFx0aWYgKGNvbnRleHQuc25ha2UudGlsZXNbaV0ueCA9PT0gaGVhZC54ICYmIGNvbnRleHQuc25ha2UudGlsZXNbaV0ueSA9PT0gaGVhZC55KSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBzbmFrZUhpdEJvdW5kYXJpZXMoY29udGV4dDogR2FtZSkge1xyXG5cdFx0XHQvLyBUaGUgdGlsZSB3aXRoIHRoZSBjb29yZGluYXRlICdjb250ZXh0LmNhbnZhcy53aWR0aCAtIGNvbnRleHQuc25ha2UudGlsZVNpemUnIGlzIHRoZSBsYXN0IHRpbGUgaW4gdGhlIGNhbnZhcy5cclxuXHRcdFx0Y29uc3QgaGl0TGVmdFdhbGwgPSBoZWFkLnggPCAwO1xyXG5cdFx0XHRjb25zdCBoaXRSaWdodFdhbGwgPSBoZWFkLnggPiBjb250ZXh0LmNhbnZhcy53aWR0aCAtIGNvbnRleHQuc25ha2UudGlsZVNpemU7IFxyXG5cdFx0XHRjb25zdCBoaXRUb3B0V2FsbCA9IGhlYWQueSA8IDA7XHJcblx0XHRcdGNvbnN0IGhpdEJvdHRvbVdhbGwgPSBoZWFkLnkgPiBjb250ZXh0LmNhbnZhcy5oZWlnaHQgLSBjb250ZXh0LnNuYWtlLnRpbGVTaXplO1xyXG5cclxuXHRcdFx0cmV0dXJuIGhpdExlZnRXYWxsIHx8IGhpdFJpZ2h0V2FsbCB8fCBoaXRUb3B0V2FsbCB8fCBoaXRCb3R0b21XYWxsO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRGlzcGF0Y2hlcyBhICdyZXNldC1zY29yZScgZXZlbnQgdG8gcmVzZXQgdGhlIHBsYXllcidzIHNjb3JlLlxyXG5cdCAqIFxyXG5cdCAqIFRoZSBsaXN0ZW5lciBmb3IgdGhpcyBldmVudCBpcyBpbiB0aGUgU2NvcmVIYW5kbGVyIGNsYXNzLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgZGlzcGF0Y2hSZXNldFNjb3JlRXZlbnQoKSB7XHJcblx0XHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzZXQtc2NvcmUnKSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZW5kZXJzIGEgc3RhdGljIHNuYWtlIG9uIHRoZSBjYW52YXMuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBpbml0aWFsUmVuZGVyKCk6IHZvaWQge1xyXG5cdFx0dGhpcy5jYW52YXMuY2xlYXIoKTtcclxuXHRcdHRoaXMuY2FudmFzLmRyYXdFbGVtZW50KHRoaXMuc25ha2UpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTW92ZXMgdGhlIHNuYWtlIGFuZCBkcmF3cyBpdHMgdGlsZXMgYW5kIHRoZSBwaWVjZSBvZiBmb29kLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgcmVuZGVyR2FtZSgpOiB2b2lkIHtcclxuXHJcblx0XHRpZiAodGhpcy5oYXNTbmFrZUdhbWVFbmRlZCgpKSB7XHJcblx0XHRcdGNsZWFySW50ZXJ2YWwodGhpcy5nYW1lSW50ZXJ2YWwpO1xyXG5cdFx0XHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5jaGFuZ2VHYW1lU3RhdGUoJ1lvdSBkaWVkIDooIFByZXNzIFwiUlwiIHRvIHJlc3RhcnQgdGhlIGdhbWUuJylcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY2FudmFzLmNsZWFyKCk7XHJcblx0XHR0aGlzLnNuYWtlLm1vdmUodGhpcy5mb29kKTtcclxuXHJcblx0XHR0aGlzLmNhbnZhcy5kcmF3RWxlbWVudCh0aGlzLnNuYWtlKTtcclxuXHRcdHRoaXMuY2FudmFzLmRyYXdFbGVtZW50KHRoaXMuZm9vZCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTdGFydHMgdGhlIGdhbWUuXHJcblx0ICovXHJcblx0cHVibGljIHN0YXJ0KCk6IHZvaWQge1xyXG5cdFx0aWYgKCF0aGlzLnJ1bm5pbmcpIHtcclxuXHRcdFx0dGhpcy5nYW1lSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzLnJlbmRlckdhbWUuYmluZCh0aGlzKSwgdGhpcy5nYW1lU3BlZWQpO1xyXG5cdFx0XHR0aGlzLmZvb2QuZ2VuZXJhdGVDb29yZGluYXRlcyh0aGlzLnNuYWtlLnRpbGVzKTtcclxuXHRcdFx0dGhpcy5ydW5uaW5nID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5jaGFuZ2VHYW1lU3RhdGUoJycpXHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBQYXVzZXMgdGhlIGdhbWUuXHJcblx0ICovXHJcblx0cHVibGljIHBhdXNlKCk6IHZvaWQge1xyXG5cdFx0Y2xlYXJJbnRlcnZhbCh0aGlzLmdhbWVJbnRlcnZhbCk7XHJcblx0XHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuXHRcdHRoaXMuY2hhbmdlR2FtZVN0YXRlKCdQYXVzZWQuLi4nKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlc3VtZXMgYSBwYXVzZWQgZ2FtZS5cclxuXHQgKi9cclxuXHRwdWJsaWMgcmVzdW1lKCk6IHZvaWQge1xyXG5cdFx0aWYgKCF0aGlzLnJ1bm5pbmcpIHtcclxuXHRcdFx0dGhpcy5nYW1lSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzLnJlbmRlckdhbWUuYmluZCh0aGlzKSwgdGhpcy5nYW1lU3BlZWQpO1xyXG5cdFx0XHR0aGlzLnJ1bm5pbmcgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmNoYW5nZUdhbWVTdGF0ZSgnJyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZXN0YXJ0cyB0aGUgZ2FtZS5cclxuXHQgKi9cclxuXHRwdWJsaWMgcmVzdGFydCgpOiB2b2lkIHtcclxuXHRcdHRoaXMuc25ha2UucmVzZXRDb29yZGluYXRlcygpO1xyXG5cdFx0dGhpcy5kaXNwYXRjaFJlc2V0U2NvcmVFdmVudCgpO1xyXG5cdFx0dGhpcy5jaGFuZ2VHYW1lU3RhdGUoJycpXHJcblxyXG5cdFx0LyogXHJcblx0XHRcdEl0J3MgbmVjZXNzYXJ5IHRoYXQgdGhlIGZvb2QgY29vcmRpbmF0ZXMgYmUgZ2VuZXJhdGVkIFxyXG5cdFx0XHRvbmx5IGFmdGVyIHRoZSBzbmFrZSdzIGNvb3JkaW5hdGVzIGhhdmUgYmVlbiByZXNldCwgXHJcblx0XHRcdGJlY2F1c2UgdGhlIGdlbmVyYXRlQ29vcmRpbmF0ZXMgZnVuY3Rpb24gZGVwZW5kcyBvbiB0aGUgXHJcblx0XHRcdHNuYWtlJ3MgdGlsZXMgYXJyYXkuXHJcblx0XHQqL1xyXG5cdFx0dGhpcy5mb29kLmdlbmVyYXRlQ29vcmRpbmF0ZXModGhpcy5zbmFrZS50aWxlcyk7XHJcblx0XHR0aGlzLmluaXRpYWxSZW5kZXIoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgd2hldGhlciB0aGUgZ2FtZSBpcyBydW5uaW5nIG9yIG5vdC5cclxuXHQgKi9cclxuXHRwdWJsaWMgaXNHYW1lUnVubmluZygpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiB0aGlzLnJ1bm5pbmc7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTd2l0Y2hlcyBjb2xvciB0aGVtZXMgYmV0d2VlbiBkYXJrIGFuZCB3aGl0ZSBtb2Rlcy5cclxuXHQgKi9cclxuXHRwdWJsaWMgc3dpdGNoQ29sb3JUaGVtZSgpOiB2b2lkIHtcclxuXHRcdGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrJyk7XHJcblx0XHR0aGlzLmNhbnZhcy5zd2l0Y2hDb2xvclRoZW1lKCk7XHJcblxyXG5cdFx0Ly8gVXBkYXRlcyB0aGUgY2FudmFzIHdpdGggbmV3IGNvbG9ycyBhbmQgcmVkcmF3cyBhbGwgZWxlbWVudHMgb24gaXRcclxuXHRcdHRoaXMuY2FudmFzLmNsZWFyKCk7XHJcblx0XHR0aGlzLmNhbnZhcy5kcmF3RWxlbWVudCh0aGlzLnNuYWtlKTtcclxuXHRcdHRoaXMuY2FudmFzLmRyYXdFbGVtZW50KHRoaXMuZm9vZCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDaGFuZ2VzIHRoZSBnYW1lJ3MgZGlmZmljdWx0eSBieSBpbmNyZWFzaW5nIHRoZSBtYWluIGxvb3AncyBzcGVlZC5cclxuXHQgKiBAcGFyYW0gZGlmZmljdWx0eSBUaGUgbmV3IGRpZmZpY3VsdHkgKG5ldyBsb29wJ3Mgc3BlZWQpLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBjaGFuZ2VEaWZmaWN1bHR5KGRpZmZpY3VsdHk6IG51bWJlcik6IHZvaWQge1xyXG5cdFx0dGhpcy5nYW1lU3BlZWQgPSBkaWZmaWN1bHR5O1xyXG5cdFx0XHJcblx0XHQvKiBcclxuXHRcdFx0V2l0aG91dCBjaGVja2luZyBmb3IgdGhlIHJ1bm5pbmcgcHJvcGVydHksIHRoZSBnYW1lIHdvdWxkXHJcblx0XHRcdGltbWVkaWF0ZWx5IHJ1biBhZnRlciBjaGFuZ2luZyB0aGUgZGlmZmljdWx0eSwgZXZlbiBpZiBpdCB3ZXJlIHBhdXNlZFxyXG5cdFx0XHRpbiB0aGUgZmlyc3QgcGxhY2UuXHRcdFxyXG5cdFx0Ki8gXHJcblx0XHRpZiAodGhpcy5pc0dhbWVSdW5uaW5nKCkpIHtcclxuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aGlzLmdhbWVJbnRlcnZhbCk7XHJcblx0XHRcdHRoaXMuZ2FtZUludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5yZW5kZXJHYW1lLmJpbmQodGhpcyksIHRoaXMuZ2FtZVNwZWVkKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoYW5nZXMgdGhlIGdhbWUgc3RhdGUgdG8gaW5kaWNhdGUgd2hldGhlciBpdCdzIHJ1bm5pbmcgb3IgcGF1c2VkLlxyXG5cdCAqIEBwYXJhbSBzdGF0ZSBOZXh0IGdhbWUgc3RhdGUuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBjaGFuZ2VHYW1lU3RhdGUoc3RhdGU6IHN0cmluZyk6IHZvaWQge1xyXG5cdFx0Y29uc3QgZ2FtZVN0YXRlRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWUtc3RhdGUnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuXHRcdGdhbWVTdGF0ZURpdi5pbm5lckhUTUwgPSBzdGF0ZTtcclxuXHR9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9